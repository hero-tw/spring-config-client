buildscript {
	ext {
		springBootVersion = '2.0.5.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
		classpath('org.springframework.cloud:spring-cloud-starter-aws-parameter-store-config:2.0.0.RELEASE')
		classpath("org.springframework.boot:spring-boot-starter-actuator:2.0.5.RELEASE")
	}

}
plugins {
	id "net.foragerr.jmeter" version "1.1.0-4.0"
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'
apply plugin: 'jacoco'
apply plugin: 'findbugs'

group = 'com.hero'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

ext {
	springCloudVersion = 'Finchley.SR1'
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.cloud:spring-cloud-starter-config')

	implementation("org.springframework.cloud:spring-cloud-starter-aws-parameter-store-config")
	implementation("org.springframework.boot:spring-boot-starter-actuator")

	testImplementation('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

bootJar {
	classifier = 'boot'
}

docker {
	name "${project.group}/${bootJar.baseName}"
	files new File(project.buildDir, "libs/$project.name-$project.version-boot.jar")
	//copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['JAR': "$project.name-$project.version-boot.jar"])
}

jacoco {
	toolVersion = "0.8.1"
}

jacocoTestReport {
	group = "Reporting"
	reports {
		xml.enabled false
		csv.enabled false
		html.enabled true
	}
}


tasks.withType(FindBugs) {
	reports {
		xml.enabled false
		html.enabled true
	}
}
findbugsMain.ignoreFailures false
findbugsTest.ignoreFailures false


tasks.clean.dependsOn(tasks.dockerClean)
tasks.docker.dependsOn(tasks.bootJar)
tasks.check.finalizedBy(tasks.jacocoTestReport)

jmeter {
	jmTestFiles = [file("src/test/jmeter/perf1.jmx")]
	jmSystemPropertiesFiles = [file("src/test/jmeter/user.properties")]
	enableExtendedReports = true
	csvLogFile = false
	resultFileNameTimeStamp =java.util.Optional.ofNullable(System.getenv("BUILD_NUMBER"))
			.orElse("LOCAL")
	reportXslt = file("src/test/jmeter/template.xslt")
	jmUserProperties = ["hostname=blog.coop.software"]
}


task spinUpJMeter() {
	group "Performance"
	doFirst {
		String runName = "performance-" +
				java.util.Optional.ofNullable(System.getenv("BUILD_NUMBER"))
						.orElse("LOCAL")

		ProcessBuilder pb = new ProcessBuilder()
		pb.environment().put("TF_VAR_run_name", runName);
		pb.environment().put("TF_VAR_access_key", System.getenv("AWS_ACCESS_KEY_ID"))
		pb.environment().put("TF_VAR_secret_access", System.getenv("AWS_SECRET_ACCESS_KEY"))

		int result = pb.command("./apply.sh")
				.directory(new File(project.rootDir, "etc/perf"))
				.inheritIO()
				.start()
				.waitFor()

		assert result == 0: "terraform apply failed with return code " + result
	}
}

task tearDownJMeter() {
	group "Performance"
	doLast {
		String runName = "performance-" +
				java.util.Optional.ofNullable(System.getenv("BUILD_NUMBER"))
						.orElse("LOCAL")

		ProcessBuilder pb = new ProcessBuilder()
		pb.environment().put("TF_VAR_run_name", runName);
		pb.environment().put("TF_VAR_access_key", System.getenv("AWS_ACCESS_KEY_ID"))
		pb.environment().put("TF_VAR_secret_access", System.getenv("AWS_SECRET_ACCESS_KEY"))

		int result = pb.command("terraform", "destroy", "--auto-approve")
				.inheritIO()
				.start()
				.waitFor()
		assert result == 0: "terraform destroys failed with return code " + result
	}
}
